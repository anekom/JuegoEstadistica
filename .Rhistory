acertadas <- sum(portfolio_test$Default == portfolio_test$pred_finalDOS)
acertadas
falladas <- sum(portfolio_test$Default != portfolio_test$pred_finalDOS)
falladas
porcentajeAcierto <- acertadas/nrow(portfolio_test)
porcentajeAcierto
modeloGLM<- glm(Default ~ 0 + Total_OB  + Current_Installment + LTV + Days_in_arrears,
data = portfolio_train,
family = "binomial")
summary(modeloGLM)
knitr::opts_chunk$set(echo = TRUE)
libs <- c("readxl", "tidyverse")
sapply(libs, require, character.only = TRUE)
setwd("C:/Users/andrea/Desktop/ClasesGeo")
Rwork <- ("C:/Users/andrea/Desktop/ClasesGeo/Original/")
BBDD_2017 <- read_excel(paste(Rwork,"3.1.9_20200324_2017_OOS_movements.xlsx",sep = ""))
BBDD_2018 <- read_excel(paste(Rwork,"3.1.10_20200324_2018_OOS_movements.xlsx",sep = ""))
BBDD_2019 <- read_excel(paste(Rwork,"3.1.7_20200324_2019_OOS_movements.xlsx",sep = ""))
BBDD_2020 <- read_excel(paste(Rwork,"3.1.8_20200324_2020_OOS_movements.xlsx",sep = ""))
colaterals <- read_excel(paste(Rwork,"3.1.6_20200319 - Project Dalia_Out-of-sample portfolio_Collateral information (January 2020).xlsx",sep = ""), sheet = "Collaterals", skip = 4)
portfolio <- read_excel(paste(Rwork,"3.1.11_20200324_Project Dalia - Out Of Sample_portfolio.xlsx",sep = ""), sheet = "Out-of-sample", skip = 6)
sum(is.na(portfolio))
portfolio <- portfolio[c(1, 2, 5:7, 9:12, 19, 20, 23)]
names(portfolio)
str(portfolio)
portfolio <- portfolio %>% rename( Loan_ID = "Loan ID",
Origination_Date = "Origination Date",
Restructured_Refinanced = "Restructured/Refinanced (Y/N)",
Maturity_Date = "Maturity Date",
Initial_Balance = "Initial Balance",
Administrative_Status= "Administrative Status",
Total_OB = "Total OB",
Ow_Principal= "O/w Principal",
Days_in_arrears = "Days in arrears",
Current_Interest_Rate= "Current Interest Rate",
Current_Installment = "Current Installment"
)
names(portfolio)
portfolio$year <- substring(portfolio$Month, 1, 4)
portfolio$period <- substring(portfolio$Month, 5, 6)
portfolio <- portfolio[c(13,14,2:12)]
portfolio$Origination_Date <- as.Date(portfolio$Origination_Date, format="%Y-%m-%d")
portfolio$Maturity_Date <- as.Date(portfolio$Maturity_Date, format="%Y-%m-%d")
portfolio <- filter(portfolio, !is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Maturity_Date))
portfolio <- portfolio[-c(5)]
portfolio$Administrative_Status <- as.factor(portfolio$Administrative_Status)
levels(portfolio$Administrative_Status)
sum(is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Initial_Balance))
sum(is.na(portfolio$Total_OB))
sum(is.na(portfolio$Ow_Principal))
sum(is.na(portfolio$Days_in_arrears))
sum(is.na(portfolio$Current_Interest_Rate))
sum(is.na(portfolio$Current_Installment))
sum(is.na(portfolio$Initial_Balance))
str(portfolio)
BBDD_Movs <- rbind(BBDD_2017, BBDD_2018, BBDD_2019, BBDD_2020)
str(BBDD_Movs)
BBDD_Movs$year <- substring(BBDD_Movs$Month, 1, 4)
BBDD_Movs$period <- substring(BBDD_Movs$Month, 5, 6)
BBDD_Movs <- BBDD_Movs[c(9,10,2:8)]
str(BBDD_Movs)
BBDD_Movs <- BBDD_Movs %>% rename( Loan_ID = "Id Loan",
No_movs = "# Movements")
names(BBDD_Movs)
remove(BBDD_2017, BBDD_2018, BBDD_2019, BBDD_2020)
str(BBDD_Movs)
unique(BBDD_Movs$Subtype)
BBDD_Movs$Subtype <- as.factor(BBDD_Movs$Subtype)
BBDD_Movs$Type <- as.factor(BBDD_Movs$Type)
BBDD_Movs$Concept <- as.factor(BBDD_Movs$Concept)
BBDD_Movs$Description <- as.factor(BBDD_Movs$Description)
sum(is.na(BBDD_Movs$year))
sum(is.na(BBDD_Movs$period))
sum(is.na(BBDD_Movs$Loan_ID))
sum(is.na(BBDD_Movs$No_movs))
sum(is.na(BBDD_Movs$Amount))
sum(is.na(BBDD_Movs$Subtype))
sum(is.na(BBDD_Movs$Type))
sum(is.na(BBDD_Movs$Concept))
sum(is.na(BBDD_Movs$Description))
BBDD_Movs <- BBDD_Movs %>% filter((!is.na(BBDD_Movs$Subtype)))
BBDD_Movs %>% filter(BBDD_Movs$Subtype == "Subrogaciones")
unique(BBDD_Movs$Type)
unique(BBDD_Movs$Subtype)
# Condici?n 1 : Si el registro se encuentra en Daci?n / Adjudicaci?n est? en DEFAULT
BBDD_Movs$Default <- ifelse(BBDD_Movs$Subtype == "Dación/Adjudicación",1,0)
portfolio$Default <- ifelse(portfolio$Days_in_arrears >= 360 & portfolio$Administrative_Status != "NORMAL" ,1,0)
portfolio %>% filter(portfolio$Default == 1)
portfolio_enlace <- portfolio %>% group_by(Loan_ID)
portfolio_enlace <- portfolio_enlace %>% summarise(Default = max(Default))
portfolio_enlace
portfolio_enlace <- rename(portfolio_enlace, c("Default_enlace"= "Default"))
portfolio_prueba <- merge(portfolio, portfolio_enlace, by="Loan_ID", x.all=TRUE)
BBDD_MovsP <- merge(BBDD_Movs, portfolio_enlace, by="Loan_ID", x.all=TRUE)
BBDD_MovsP$Default <- NULL
portfolio$Default <- pmax(portfolio_prueba$Default, portfolio_prueba$Default_enlace)
colaterals$CurrentAppraisalValue <- as.numeric(colaterals$CurrentAppraisalValue)
colateralINFO <- aggregate(colaterals$CurrentAppraisalValue, by=list(Category=colaterals$LoanID), FUN=sum)
colateralINFO <- colateralINFO %>% rename( Loan_ID = "Category", AppraisalValue = "x")
portfolio <- merge(portfolio,colateralINFO)
sum(is.na(portfolio$AppraisalValue))
portfolio <- portfolio %>% filter((!is.na(portfolio$AppraisalValue)))
#LTV = prestamo/tasacion
portfolio$LTV <- portfolio$Total_OB/portfolio$AppraisalValue
numDefaults <- sum(portfolio$Default == 1)
numDefaults/nrow(portfolio)*100
numDefaults <- sum(BBDD_MovsP$Default_enlace == 1)
numDefaults/nrow(BBDD_MovsP)*100
numDefaults <- sum(portfolio_enlace$Default_enlace == 1)
numDefaults/nrow(portfolio_enlace)*100
quantile(portfolio$Initial_Balance, 0.25) # primer cuartil
quantile(portfolio$Initial_Balance, 0.75) # tercer cuartil
quantile(portfolio$Total_OB, 0.25) # primer cuartil
quantile(portfolio$Total_OB, 0.75) # tercer cuartil
quantile(portfolio$Days_in_arrears, 0.25) # primer cuartil
quantile(portfolio$Days_in_arrears, 0.75) # tercer cuartil
quantile(portfolio$Current_Interest_Rate, 0.25) # primer cuartil
quantile(portfolio$Current_Interest_Rate, 0.75) # tercer cuartil
quantile(portfolio$Current_Installment, 0.25) # primer cuartil
quantile(portfolio$Current_Installment, 0.75) # tercer cuartil
IQR(portfolio$Initial_Balance)
IQR(portfolio$Total_OB)
IQR(portfolio$Days_in_arrears)
IQR(portfolio$Current_Interest_Rate)
IQR(portfolio$Current_Installment)
sd(portfolio$Initial_Balance) # desviacion estandar
var(portfolio$Initial_Balance) # varianza
sd(portfolio$Total_OB) # desviacion estandar
var(portfolio$Total_OB) # varianza
sd(portfolio$Days_in_arrears) # desviacion estandar
var(portfolio$Days_in_arrears) # varianza
sd(portfolio$Current_Interest_Rate) # desviacion estandar
var(portfolio$Current_Interest_Rate) # varianza
sd(portfolio$Current_Installment) # desviacion estandar
var(portfolio$Current_Installment) # varianza
sd(portfolio$Initial_Balance) / mean(portfolio$Initial_Balance)
sd(portfolio$Total_OB) / mean(portfolio$Total_OB)
sd(portfolio$Days_in_arrears) / mean(portfolio$Days_in_arrears)
sd(portfolio$Current_Interest_Rate) / mean(portfolio$Current_Interest_Rate)
sd(portfolio$Current_Installment) / mean(portfolio$Current_Installment)
summary(portfolio)
sum(portfolio$Default==1)/nrow(portfolio)
hist(portfolio$Total_OB)
hist(portfolio$AppraisalValue)
hist(portfolio$LTV)
hist(portfolio$Current_Interest_Rate)
hist(portfolio$Days_in_arrears)
hist(as.numeric(portfolio$year))
hist(as.numeric(portfolio$period))
names(portfolio$Administrative_Status)
hist(portfolio$Default)
ggplot(data=portfolio, aes(x=Total_OB, y=Default))+geom_point()
# Total_OB + AppraisalValue + Current_Installment + LTV + Days_in_arrears
ggplot(portfolio, aes(x = Days_in_arrears, y = Current_Installment, color = Default)) + geom_point()
#ggplot(data=portfolio, aes(x=Days_in_arrears, y=Default))+geom_point()
# Total_OB + AppraisalValue + Current_Installment + LTV + Days_in_arrears
libs <- c("caret")
sapply(libs, require, character.only = TRUE)
set.seed(123)
# creamos un vector de particion sobre la variable Default
# el tamaño será del 70%
trainIndex=createDataPartition(portfolio$Default, p=0.70)$Resample1
# definimos los dos conjuntos
portfolio_train=portfolio[trainIndex, ] # conjunto entrenamiento
portfolio_test= portfolio[-trainIndex, ] # conjunto de test
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
library(leaps)
library(MASS)
modeloGLMStepAIC<- glm(Default ~ 0 + log(Initial_Balance) + Total_OB + Current_Installment + LTV + Days_in_arrears ,
data = portfolio_train,
family = "binomial")
stepAIC(modeloGLMStepAIC, direction = "both")
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
modeloGLMstepAIC<- glm(Default ~ log(Initial_Balance) + Total_OB + LTV -  1 ,
data = portfolio_train,
family = "binomial")
summary(modeloGLMstepAIC)
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
modeloGLM<- glm(Default ~ 0 + log(Initial_Balance) + LTV ,
data = portfolio_train,
family = "binomial")
summary(modeloGLM)
# vemos las predicciones en el conjunto de test
portfolio_test$pred<-predict(modeloGLM, portfolio_test, type= "response")
head(portfolio_test)
# Hacemos el resumen gráfico del resultado
hist(100*portfolio_test$pred, col="skyblue",
main=" resultados modeloGLM glm() sobre datos Portfolio test",
xlab="Probabilidad en % de default",
ylab="Frecuencia")
# Marcamos un umbral en el que consideramos para que caiga en default o no
abline(v= 10,col= "navy", lwd=3)  # marcamos el umbral de default
portfolio_test$pred_final <- ifelse(portfolio_test$pred > 0.1, 1, 0)
# resumen de resultados
table(portfolio_test$pred_final)
acertadas <- sum(portfolio_test$Default == portfolio_test$pred_final)
acertadas
falladas <- sum(portfolio_test$Default != portfolio_test$pred_final)
falladas
porcentajeAcierto <- acertadas/nrow(portfolio_test)
porcentajeAcierto
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
library(leaps)
library(MASS)
modeloGLMStepAIC<- glm(Default ~ log(Initial_Balance) + Total_OB + Current_Installment + LTV + Days_in_arrears ,
data = portfolio_train,
family = "binomial")
stepAIC(modeloGLMStepAIC, direction = "both")
library(rpart)
# Crear un modelo de clasificacion  con rpart
library(rpart)
library(rpart.plot)
portfolio_train_arbol <- select(portfolio_train, -Loan_ID, -year, -period, Origination_Date, Maturity_Date, Administrative_Status, -Ow_Principal)
knitr::opts_chunk$set(echo = TRUE)
libs <- c("readxl", "tidyverse")
sapply(libs, require, character.only = TRUE)
setwd("C:/Users/andrea/Desktop/ClasesGeo")
Rwork <- ("C:/Users/andrea/Desktop/ClasesGeo/Original/")
BBDD_2017 <- read_excel(paste(Rwork,"3.1.9_20200324_2017_OOS_movements.xlsx",sep = ""))
BBDD_2018 <- read_excel(paste(Rwork,"3.1.10_20200324_2018_OOS_movements.xlsx",sep = ""))
BBDD_2019 <- read_excel(paste(Rwork,"3.1.7_20200324_2019_OOS_movements.xlsx",sep = ""))
BBDD_2020 <- read_excel(paste(Rwork,"3.1.8_20200324_2020_OOS_movements.xlsx",sep = ""))
colaterals <- read_excel(paste(Rwork,"3.1.6_20200319 - Project Dalia_Out-of-sample portfolio_Collateral information (January 2020).xlsx",sep = ""), sheet = "Collaterals", skip = 4)
portfolio <- read_excel(paste(Rwork,"3.1.11_20200324_Project Dalia - Out Of Sample_portfolio.xlsx",sep = ""), sheet = "Out-of-sample", skip = 6)
sum(is.na(portfolio))
portfolio <- portfolio[c(1, 2, 5:7, 9:12, 19, 20, 23)]
names(portfolio)
str(portfolio)
portfolio <- portfolio %>% rename( Loan_ID = "Loan ID",
Origination_Date = "Origination Date",
Restructured_Refinanced = "Restructured/Refinanced (Y/N)",
Maturity_Date = "Maturity Date",
Initial_Balance = "Initial Balance",
Administrative_Status= "Administrative Status",
Total_OB = "Total OB",
Ow_Principal= "O/w Principal",
Days_in_arrears = "Days in arrears",
Current_Interest_Rate= "Current Interest Rate",
Current_Installment = "Current Installment"
)
names(portfolio)
portfolio$year <- substring(portfolio$Month, 1, 4)
portfolio$period <- substring(portfolio$Month, 5, 6)
portfolio <- portfolio[c(13,14,2:12)]
portfolio$Origination_Date <- as.Date(portfolio$Origination_Date, format="%Y-%m-%d")
portfolio$Maturity_Date <- as.Date(portfolio$Maturity_Date, format="%Y-%m-%d")
portfolio <- filter(portfolio, !is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Maturity_Date))
portfolio <- portfolio[-c(5)]
portfolio$Administrative_Status <- as.factor(portfolio$Administrative_Status)
levels(portfolio$Administrative_Status)
sum(is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Maturity_Date))
sum(is.na(portfolio$Initial_Balance))
sum(is.na(portfolio$Total_OB))
sum(is.na(portfolio$Ow_Principal))
sum(is.na(portfolio$Days_in_arrears))
sum(is.na(portfolio$Current_Interest_Rate))
sum(is.na(portfolio$Current_Installment))
sum(is.na(portfolio$Initial_Balance))
str(portfolio)
BBDD_Movs <- rbind(BBDD_2017, BBDD_2018, BBDD_2019, BBDD_2020)
str(BBDD_Movs)
BBDD_Movs$year <- substring(BBDD_Movs$Month, 1, 4)
BBDD_Movs$period <- substring(BBDD_Movs$Month, 5, 6)
BBDD_Movs <- BBDD_Movs[c(9,10,2:8)]
str(BBDD_Movs)
BBDD_Movs <- BBDD_Movs %>% rename( Loan_ID = "Id Loan",
No_movs = "# Movements")
names(BBDD_Movs)
remove(BBDD_2017, BBDD_2018, BBDD_2019, BBDD_2020)
str(BBDD_Movs)
unique(BBDD_Movs$Subtype)
BBDD_Movs$Subtype <- as.factor(BBDD_Movs$Subtype)
BBDD_Movs$Type <- as.factor(BBDD_Movs$Type)
BBDD_Movs$Concept <- as.factor(BBDD_Movs$Concept)
BBDD_Movs$Description <- as.factor(BBDD_Movs$Description)
sum(is.na(BBDD_Movs$year))
sum(is.na(BBDD_Movs$period))
sum(is.na(BBDD_Movs$Loan_ID))
sum(is.na(BBDD_Movs$No_movs))
sum(is.na(BBDD_Movs$Amount))
sum(is.na(BBDD_Movs$Subtype))
sum(is.na(BBDD_Movs$Type))
sum(is.na(BBDD_Movs$Concept))
sum(is.na(BBDD_Movs$Description))
BBDD_Movs <- BBDD_Movs %>% filter((!is.na(BBDD_Movs$Subtype)))
BBDD_Movs %>% filter(BBDD_Movs$Subtype == "Subrogaciones")
unique(BBDD_Movs$Type)
unique(BBDD_Movs$Subtype)
# Condici?n 1 : Si el registro se encuentra en Daci?n / Adjudicaci?n est? en DEFAULT
BBDD_Movs$Default <- ifelse(BBDD_Movs$Subtype == "Dación/Adjudicación",1,0)
portfolio$Default <- ifelse(portfolio$Days_in_arrears >= 360 & portfolio$Administrative_Status != "NORMAL" ,1,0)
portfolio %>% filter(portfolio$Default == 1)
portfolio_enlace <- portfolio %>% group_by(Loan_ID)
portfolio_enlace <- portfolio_enlace %>% summarise(Default = max(Default))
portfolio_enlace
portfolio_enlace <- rename(portfolio_enlace, c("Default_enlace"= "Default"))
portfolio_prueba <- merge(portfolio, portfolio_enlace, by="Loan_ID", x.all=TRUE)
BBDD_MovsP <- merge(BBDD_Movs, portfolio_enlace, by="Loan_ID", x.all=TRUE)
BBDD_MovsP$Default <- NULL
portfolio$Default <- pmax(portfolio_prueba$Default, portfolio_prueba$Default_enlace)
colaterals$CurrentAppraisalValue <- as.numeric(colaterals$CurrentAppraisalValue)
colateralINFO <- aggregate(colaterals$CurrentAppraisalValue, by=list(Category=colaterals$LoanID), FUN=sum)
colateralINFO <- colateralINFO %>% rename( Loan_ID = "Category", AppraisalValue = "x")
portfolio <- merge(portfolio,colateralINFO)
sum(is.na(portfolio$AppraisalValue))
portfolio <- portfolio %>% filter((!is.na(portfolio$AppraisalValue)))
#LTV = prestamo/tasacion
portfolio$LTV <- portfolio$Total_OB/portfolio$AppraisalValue
numDefaults <- sum(portfolio$Default == 1)
numDefaults/nrow(portfolio)*100
numDefaults <- sum(BBDD_MovsP$Default_enlace == 1)
numDefaults/nrow(BBDD_MovsP)*100
numDefaults <- sum(portfolio_enlace$Default_enlace == 1)
numDefaults/nrow(portfolio_enlace)*100
quantile(portfolio$Initial_Balance, 0.25) # primer cuartil
quantile(portfolio$Initial_Balance, 0.75) # tercer cuartil
quantile(portfolio$Total_OB, 0.25) # primer cuartil
quantile(portfolio$Total_OB, 0.75) # tercer cuartil
quantile(portfolio$Days_in_arrears, 0.25) # primer cuartil
quantile(portfolio$Days_in_arrears, 0.75) # tercer cuartil
quantile(portfolio$Current_Interest_Rate, 0.25) # primer cuartil
quantile(portfolio$Current_Interest_Rate, 0.75) # tercer cuartil
quantile(portfolio$Current_Installment, 0.25) # primer cuartil
quantile(portfolio$Current_Installment, 0.75) # tercer cuartil
IQR(portfolio$Initial_Balance)
IQR(portfolio$Total_OB)
IQR(portfolio$Days_in_arrears)
IQR(portfolio$Current_Interest_Rate)
IQR(portfolio$Current_Installment)
sd(portfolio$Initial_Balance) # desviacion estandar
var(portfolio$Initial_Balance) # varianza
sd(portfolio$Total_OB) # desviacion estandar
var(portfolio$Total_OB) # varianza
sd(portfolio$Days_in_arrears) # desviacion estandar
var(portfolio$Days_in_arrears) # varianza
sd(portfolio$Current_Interest_Rate) # desviacion estandar
var(portfolio$Current_Interest_Rate) # varianza
sd(portfolio$Current_Installment) # desviacion estandar
var(portfolio$Current_Installment) # varianza
sd(portfolio$Initial_Balance) / mean(portfolio$Initial_Balance)
sd(portfolio$Total_OB) / mean(portfolio$Total_OB)
sd(portfolio$Days_in_arrears) / mean(portfolio$Days_in_arrears)
sd(portfolio$Current_Interest_Rate) / mean(portfolio$Current_Interest_Rate)
sd(portfolio$Current_Installment) / mean(portfolio$Current_Installment)
summary(portfolio)
sum(portfolio$Default==1)/nrow(portfolio)
hist(portfolio$Total_OB)
hist(portfolio$AppraisalValue)
hist(portfolio$LTV)
hist(portfolio$Current_Interest_Rate)
hist(portfolio$Days_in_arrears)
hist(as.numeric(portfolio$year))
hist(as.numeric(portfolio$period))
names(portfolio$Administrative_Status)
hist(portfolio$Default)
ggplot(data=portfolio, aes(x=Total_OB, y=Default))+geom_point()
# Total_OB + AppraisalValue + Current_Installment + LTV + Days_in_arrears
ggplot(portfolio, aes(x = Days_in_arrears, y = Current_Installment, color = Default)) + geom_point()
#ggplot(data=portfolio, aes(x=Days_in_arrears, y=Default))+geom_point()
# Total_OB + AppraisalValue + Current_Installment + LTV + Days_in_arrears
libs <- c("caret")
sapply(libs, require, character.only = TRUE)
set.seed(123)
# creamos un vector de particion sobre la variable Default
# el tamaño será del 70%
trainIndex=createDataPartition(portfolio$Default, p=0.70)$Resample1
# definimos los dos conjuntos
portfolio_train=portfolio[trainIndex, ] # conjunto entrenamiento
portfolio_test= portfolio[-trainIndex, ] # conjunto de test
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
library(leaps)
library(MASS)
modeloGLMStepAIC<- glm(Default ~ log(Initial_Balance) + Total_OB + Current_Installment + LTV + Days_in_arrears ,
data = portfolio_train,
family = "binomial")
stepAIC(modeloGLMStepAIC, direction = "both")
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
modeloGLMStepAIC<- glm(Default ~ 0 + log(Initial_Balance) + Total_OB + Current_Installment + LTV + Days_in_arrears ,
data = portfolio_train,
family = "binomial")
stepAIC(modeloGLMStepAIC, direction = "both")
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
modeloGLMstepAIC<- glm(Default ~ log(Initial_Balance) + Total_OB + LTV -  1 ,
data = portfolio_train,
family = "binomial")
summary(modeloGLMstepAIC)
# Default ~ Total_OB + Current_Installment + LTV + Days_in_arrears
modeloGLM<- glm(Default ~ 0 + log(Initial_Balance) + LTV ,
data = portfolio_train,
family = "binomial")
summary(modeloGLM)
# vemos las predicciones en el conjunto de test
portfolio_test$pred<-predict(modeloGLM, portfolio_test, type= "response")
head(portfolio_test)
# Hacemos el resumen gráfico del resultado
hist(100*portfolio_test$pred, col="skyblue",
main=" resultados modeloGLM glm() sobre datos Portfolio test",
xlab="Probabilidad en % de default",
ylab="Frecuencia")
# Marcamos un umbral en el que consideramos para que caiga en default o no
abline(v= 10,col= "navy", lwd=3)  # marcamos el umbral de default
portfolio_test$pred_final <- ifelse(portfolio_test$pred > 0.1, 1, 0)
# resumen de resultados
table(portfolio_test$pred_final)
acertadas <- sum(portfolio_test$Default == portfolio_test$pred_final)
acertadas
falladas <- sum(portfolio_test$Default != portfolio_test$pred_final)
falladas
porcentajeAcierto <- acertadas/nrow(portfolio_test)
porcentajeAcierto
# Crear un modelo de clasificacion  con rpart
library(rpart)
library(rpart.plot)
portfolio_train_arbol <- select(portfolio_train, -Loan_ID, -year, -period, Origination_Date, Maturity_Date, Administrative_Status, -Ow_Principal)
# Crear un modelo de clasificacion  con rpart
library(rpart)
library(rpart.plot)
portfolio_train_arbol <- portfolio_train[c(4, 5, 7, 10, 12, 15)]
#portfolio_train_arbol <- select(portfolio_train, -Loan_ID, -year, -period, Origination_Date, Maturity_Date, Administrative_Status, -Ow_Principal)
# creamos un modelo de clasificación en el que intervengan todas las variables
# el coeficiente cp nos extiende o acorta el arbol, simplifica resultados
modeloArbol <- rpart(Default ~ .,
data = portfolio_train_arbol, method = "class")
# Crear un modelo de clasificacion  con rpart
library(rpart)
library(rpart.plot)
portfolio_train_arbol <- portfolio_train[c(4, 5, 7, 10, 12, 13, 15)]
#portfolio_train_arbol <- select(portfolio_train, -Loan_ID, -year, -period, Origination_Date, Maturity_Date, Administrative_Status, -Ow_Principal)
# creamos un modelo de clasificación en el que intervengan todas las variables
# el coeficiente cp nos extiende o acorta el arbol, simplifica resultados
modeloArbol <- rpart(Default ~ .,
data = portfolio_train_arbol, method = "class")
# pintamos el modelo
rpart.plot(modeloArbol, fallen.leaves = FALSE,
main = "Arbol de decision de Default hijo\n(en funcion xx)\n",
shadow.col = "gray")
print(modeloArbol)
rpart.plot(modeloArbol, extra = 4)
tp<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==1)
tn<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==0)
fp<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==1)
fn<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==0)
data.frame(tp,tn,fp,fn)
accuracy <- (tp+tn)/total
total <- nrow(portfolio_test)
tp<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==1)
tn<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==0)
fp<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==1)
fn<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==0)
data.frame(tp,tn,fp,fn)
accuracy <- (tp+tn)/total
error_rate <- (fp+fn)/total
sensitivity <- tp/positive
positive <- sum(portfolio_test$Default==1)
negative <- sum(portfolio_test$Default==0)
predicted_positive <- sum(portfolio_test$pred_final==1)
predicted_negative <- sum(portfolio_test$pred_final==0)
total <- nrow(portfolio_test)
data.frame(positive, negative,predicted_positive,predicted_negative)
tp<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==1)
tn<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==0)
fp<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==1)
fn<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==0)
data.frame(tp,tn,fp,fn)
accuracy <- (tp+tn)/total
error_rate <- (fp+fn)/total
sensitivity <- tp/positive
especificity <- tn/negative
precision <- tp/predicted_positive
npv <- tn / predicted_negative
data.frame(accuracy,error_rate,sensitivity,especificity,precision,npv)
positive <- sum(portfolio_test$Default==0)
negative <- sum(portfolio_test$Default==1)
predicted_positive <- sum(portfolio_test$pred_final==0)
predicted_negative <- sum(portfolio_test$pred_final==1)
total <- nrow(portfolio_test)
data.frame(positive, negative,predicted_positive,predicted_negative)
tp<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==0)
tn<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==1)
fp<-sum(portfolio_test$Default==1 & portfolio_test$pred_final==0)
fn<-sum(portfolio_test$Default==0 & portfolio_test$pred_final==1)
data.frame(tp,tn,fp,fn)
accuracy <- (tp+tn)/total
error_rate <- (fp+fn)/total
sensitivity <- tp/positive
especificity <- tn/negative
precision <- tp/predicted_positive
npv <- tn / predicted_negative
data.frame(accuracy,error_rate,sensitivity,especificity,precision,npv)
confusionMatrix(portfolio_test$pred_final, portfolio_test$Default)
CMdata <- table(portfolio_test$pred_final, portfolio_test$Default)
confusionMatrix(CMdata)
shiny::runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
dataset <- read.csv("C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego/www/dataset.csv")
View(dataset)
datos
shiny::runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
shiny::runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
usuarios
runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
usuarios
datos
runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
shiny::runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
runApp('C:/Users/andrea/Desktop/BecaVictoria/JuegoEstadistica/Juego')
